#!/bin/bash

CMD=$1
shift
ARGS=$@

if [[ -z "$CMD" ]]; then
  docker-compose up
  exit
fi

if [[ "$CMD" == "test" ]]; then
  docker-compose run \
    --rm \
    -e FORCE_COLOR=1 \
    -e TAP_COLORS=1 \
    app \
    npm test -- $ARGS
  exit
fi

if [[ "$CMD" == "test-one" ]]; then
  docker-compose run \
    --rm \
    -e FORCE_COLOR=1 \
    -e TAP_COLORS=1 \
    app \
    npm run test-one -- $ARGS
  exit
fi

if [[ "$CMD" == "test-watch" ]]; then
  nodemon -x "./run test"
  exit
fi

if [[ "$CMD" == "shell" ]]; then
  docker-compose run --rm app sh
  exit
fi

if [[ "$CMD" == "enter" ]]; then
  docker-compose exec app sh
  exit
fi

if [[ "$CMD" == "lint" ]]; then
  docker-compose run --rm app npm run lint
  exit
fi

if [[ "$CMD" == "build" ]]; then
  docker-compose build
  exit
fi

if [[ "$CMD" == "mongo" ]]; then
  docker run -it --link pagedata_mongo_1:mongo --rm mongo sh -c 'exec mongo "$MONGO_PORT_27017_TCP_ADDR:$MONGO_PORT_27017_TCP_PORT/pagedata"'
  exit
fi

if [[ "$CMD" == "update-deps" ]]; then
  rm -rf ./node_modules

  #rm package-lock.json
  rm -rf ./package-lock.json
  
  docker-compose run --rm app npm install --package-lock
  exit
fi

if [[ "$CMD" == "install" ]]; then
  docker-compose run --rm app npm ci
  exit
fi

if [[ "$CMD" == "outdated" ]]; then
  docker-compose run --rm app npm outdated
  exit
fi

if [[ "$CMD" == "npmi" ]]; then
  SERVICE=$2
  PKG=$3
  echo "Installing $PKG inside $SERVICE"
  docker-compose run --rm $SERVICE npm install $PKG --package-lock
  exit 0
fi

if [[ "$CMD" == "help" ]]; then
  echo "Usage:
  ./run           Runs default
    update-deps   Only use when updating / adding packages
    outdated      List outdated packages
    install       Does an npm ci. Use this 99% of the time.
  "
  exit
fi


docker-compose $CMD $ARGS
